# -*- coding: utf-8 -*-
"""Question 5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17-bT25c2LblCiG5ConctUIweBJM63RAk
"""

'''5. Develop a program to read a string and perform the following operations:

 • Print all possible substring
 • Print all possible substrings of length K
 • Print all possible substrings of length K with N distinct characters
 • Print all palindrome substrings'''

def substring(s):                    # To display all the possible substrings
  for i in range(len(s)):                    
    for j in range(i+1,len(s)+1):
      string=s[i:j]
      print(string)
  i=i+1
s=str(input("Enter string : "))    
a=substring(s)
def K_len():                        # To display those substrings whose length is K
  for i in range(len(s)):                    
    for j in range(i+1,len(s)+1):
      string=s[i:j]                     
      if len(string)==K:
        print(string)
K=int(input("Enter the length of the substring : "))    
Length=K_len()    


def K_Ndistinct():                    # To display those substrings whose length is K and has N distinct characters
  N=int(input("Enter the no: of distinct characters in the substring : "))
  for i in range(len(s)):                    
    for j in range(i+1,len(s)+1):
      string=s[i:j]        
      Set=set(string)
      if len(string)==K and len(Set)==N:
        print(string) 
  print("Substrings whose length is",K,"and which has",N,"distinct characters is absent")                 
K_Ndistinct()

def palindrome():                   #Palindrome
  for i in range(len(s)):                    
    for j in range(i+1,len(s)+1):
      string=s[i:j]    
      n=string
      r=string[-1: :-1]
      count=0  
      if (r==s):
        print("The input substring",n, "is a palindrome")
        count=count+1
  if count==0:
     print("No palindromes present ")
       
palindrome()

"""<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}
.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}
</style>
<table class="tg">
<thead>
  <tr>
    <th class="tg-0pky">Test cases no.</th>
    <th class="tg-c3ow">                                                               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    Description                                                      </th>
    <th class="tg-0pky">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
    <th class="tg-c3ow">Expected Outcome</th>
    <th class="tg-c3ow">Actual Outcome</th>
    <th class="tg-0pky">&nbsp;&nbsp;&nbsp;Result&nbsp;&nbsp;&nbsp;&nbsp;</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-0pky">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1</td>
    <td class="tg-0pky"> Possible substrings</td>
    <td class="tg-0pky">  thanks</td>
    <td class="tg-0pky">t<br>th<br>tha<br>than<br>thank<br>h<br>ha<br>han<br>hank<br>hanks<br>a<br>an<br>ank<br>anks<br>n<br>nk<br>nks<br>k<br>ks<br>s<br></td>
    <td class="tg-0pky">t<br>th<br>tha<br>than<br>thank<br>h<br>ha<br>han<br>hank<br>hanks<br>a<br>an<br>ank<br>anks<br>n<br>nk<br>nks<br>k<br>ks<br>s<br></td>
    <td class="tg-c3ow">     True</td>
  </tr>
</tbody>
</table>
"""